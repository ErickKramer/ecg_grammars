//
// complexverb.grm
//

general construction ComplexVerb
   subcase of Verb // ? VerbChunk 1/7/13


general construction AuxPlusVerb  // removed optional subj  
   	subcase of ComplexVerb
   	constructional 
   		constituents
			aux: Aux
			// optional subj: NP  // why was this in ??
			main: ComplexVerb
	    constraints
			self.features <--> aux.features
			self.argform <--> main.argform
			self.verbkind <--> main.verbkind
			//aux.expectedVerbForm <--> main.features.verbform
   form
      constraints
       		aux.f before main.f
       		// aux.f meets subj.f   // why was this in ??
   meaning
      constraints
			aux.m <--> main.m.p-features
			self.m <--> main.m
			self.m.p-features <--> main.m.p-features
			//aux.m.voice <-- @voice // over-ridden by Passive case
			// subj.m <--> self.m.protagonist  // bind it if it appears 

  general construction PassiveVerb
  		subcase of Verb
  
  construction PassiveAuxPlusVerb  // was moved, BE moved
   	subcase of AuxPlusVerb, PassiveVerb 
   	constructional 
   		constituents
			aux: BeAux  // do get also!!
			main: VerbChunk
	    constraints
			main.verbform <-- PastParticiple
			self.voice <-- Passive
	meaning
		constraints
			aux.m.voice <-- @passive  // ? needed
			self.m.p-features.voice <-- @passive
			
/* Ellen
construction ProgressiveAuxPlusVerb  // was moving, has been moving
   	subcase of AuxPlusVerb
   	constructional 
   		constituents
			aux: Aux  
			main: ComplexVerb
	    constraints
			self.voice <--> main.voice 
			main.features.verbform <-- PresentParticiple
	meaning
		constraints
			aux.m.progressive <-- "yes"

					
construction PerfectAuxPlusVerb  // has moved
   	subcase of AuxPlusVerb
   	constructional 
   		constituents
			aux: HaveAux   
			main: ComplexVerb
	    constraints
			 self.voice <--> main.voice 
			 main.features.verbform <-- PastParticiple

		 
construction PassivePefectAuxPlusVerb  // has been moved
   	subcase of AuxPlusVerb
   	constructional 
   		constituents
			aux: AuxPlusAux // should restrict further !!
			main: VerbChunk
	    constraints
			main.features.verbform <-- PastParticiple
	meaning
		constraints
			aux.m.perfect <-- "yes"
			aux.m.voice <-- @passive
	
construction PassiveProgressiveAuxPlusVerb  // was being moved
   	subcase of AuxPlusVerb
   	constructional 
   		constituents
			aux: BePlusBeing
			main: VerbChunk
	    constraints
			main.features.verbform <-- PastParticiple
	meaning
		constraints
		     aux.m.progressive <-- "yes"
			 aux.m.voice <-- @passive
					
// will want this in, brute force way here; Passive Version
construction PerfectProgressiveAuxPlusVerb  //has been being moved
   	subcase of ComplexVerb
   	constructional 
   		constituents
			aux: AuxPlusAux  // restrict to perfect
			being: BeAuxPresentParticiple
 			main: VerbChunk
	    constraints
			self.features <--> aux.features
			main.features.verbform <-- PastParticiple
			self.argform <--> main.argform
	form
      constraints
       		aux.f meets being.f
			being.f meets main.f 
	meaning
		constraints
			aux.m.progressive <-- "yes"
			aux.m.voice <-- @passive
			aux.m <--> main.m.p-features
			self.m <--> main.m
			self.m.p-features <--> main.m.p-features
			//subj.m <--> self.m.protagonist  // bind it if it appears 

// end of Aux CxN
5/17/13
 

construction ConjVerb
   subcase of ComplexVerb  // general case, not chunk?
   constructional 
   		constituents
          	first: Verb
	    	connective: And-Logical  // and or etc.
	    	second: Verb
	    constraints
	    	first.features <--> self.features
	    	first.features <--> second.features  // maybe not here
   form
      constraints
       		first.f meets connective.f 
            connective.f meets second.f
   meaning: ConjProcess
      constraints
      	first.m <-> self.m.process1
        second.m <-> self.m.process2
       	connective.m <-> self.m.connective
       	self.m.protagonist <--> self.m.protagonist2

construction SerialVerb  // maybe have conj require feature match
   subcase of ComplexVerb
   constructional 
   		constituents
          	first: Verb
	    	connective: SerialConjunction  //  then, etc.
	    	second: Verb
	    constraints
	    	first.features <--> self.features
   form
      constraints
       	 first.f meets connective.f 
         connective.f meets second.f
   meaning: SerialProcess
      constraints
      	first.m <--> self.m.process1
        second.m <--> self.m.process2
       	//connective.m <--> self.m.connective
        self.m.protagonist <--> self.m.protagonist2

/*
construction ModifiedVerb  // should not be copula, ?needed  11/21/12
  	subcase of Verb
   	constructional 
   		constituents
			modifier: Adverbial
			modifiedVerb: Verb
		constraints
			self.features <--> modifiedVerb.features
	meaning
		constraints
			modifier.m.modifiedThing <--> modifiedVerb.m
*/
			