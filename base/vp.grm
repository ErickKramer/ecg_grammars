//
// vp.grm
//
//The general VP construction, below, captures distributional and meaning similarities of its many subcases.
// Because these subcases differ as to the types of constituents they contain, this general VP construction
// does not list any constituents (see ComplexVP, below, for further comments).
//

general construction VP
 subcase of HasVerbFeatures //not currently RootType   8/9/13 *****************
  meaning: Process 
    evokes EventDescriptor as ed
    constraints
      self.m <--> ed.eventProcess
	  self.m.ed <--> ed // pointer from process to EventDescriptor



general construction ArgumentStructure //make an agentive subcase?
  subcase of VP
  constructional
    constituents
      v : Verb 
    constraints
      self.features <--> v.features  // agreement features
      self.verbform <--> v.verbform  //1/29/14  changed VerbFeatures
      self.voice <--> v.voice
   meaning
     evokes A123 as s  // 8/17/13 used in all subcases??
     constraints
       v.m  <--> ed.profiledProcess
       self.m.p-features <--> v.m.p-features // 1/3/13 ????
      // self.ed.eventProcess.p-features <--> self.ed.profiledProcess.p-features 1/15/13



/* no constraints -- for use in testing purposes only
construction testVP
 subcase of VP
	constructional 
        constituents
        v: Verb
        obj: NP
constraints
      self.features <--> v.features
      self.voice <--> v.voice
   meaning
     constraints
       v.m  <--> ed.profiledProcess
       self.ed.eventProcess.p-features <--> self.ed.profiledProcess.p-features
*/


//  ***********************
//      Complex VPs 
//  ***********************
/*
 + ComplexVPs provides a way to combine VPs, e.g. serial or conjoined VPs
 + Complex VPs are similar to other (non-complex) VPs in two important respects:
     -- As with other VPs, ComplexVPs identify their meaning with a (subcase of a) Process schema; 
            these are generally some kind of ComplexProcess (e.g. serial process)
     -- The distribution of ComplexVPs is similar to that of other VPs

  + ComplexVPs differ from 'simple' VPs (e.g. ArgumentStructure cxns) in that they have VP constituents,
      and do not have a verb constituent.  

  + These meaning and distributional similarities to other VPs are captured via the general VP construction (see above).  
  + Because of differences in the types of constituents for 'simple' and complexVPs, the general VP cxn does not 
    include any constituents.
*/  


// 2/27/14:  some subcases are currently commented out, some back 4/1/14

general construction ComplexVP
  subcase of VP
    constructional 
        constituents
         v1: HasVerbFeatures
         v2: VP
       constraints  	
			v1.features  <-->  self.features
		meaning: ComplexProcess 
		    //self.m.p-features <--> v1.m.p-features
			

// Same entity is protagonist of two different, serial processes
// e.g. he walked into the room then moved the box

construction SerialVP  // robot, do X then do Y
	subcase of ComplexVP 
 	constructional 
        constituents
         v1:VP
         conj:SerialConjunction
         v2:VP
      form
        constraints
	       v1.f before conj
	       conj before v2.f
      meaning: SerialProcess
        constraints
        	self.m.protagonist <--> v1.m.protagonist
        	v2.m.protagonist <--> v1.m.protagonist
        	self.m.process1 <--> v1.m
        	self.m.process2 <--> v2.m
			self.m.connective <--> conj.m
			ed.profiledParticipant <--> self.m.protagonist  // move to VP?
/*		

construction PurposeVP  // robot, do X to do Y
	subcase of ComplexVP 
 	constructional 
        constituents
        	v1:VP
        	inorder: InOrder // not optional 1/7/13
         	conj:TO-Purpose
          	v2:VP
        constraints
         	self.features <--> v1.features
         	v2.features.verbform <-- Base // ipmerative
       form 
        constraints
	       v1.f before inorder
	       inorder before  conj
	       conj before v2.f
       meaning: PurposeProcess
       	constraints
       		self.m.protagonist.ontological-category <-- @sentient
       		self.m.connective <--> conj.m
       		ed.profiledParticipant <--> self.m.protagonist  // move to VP?
  			self.m.protagonist <--> v2.m.protagonist
  			self.m.protagonist <--> v1.m.protagonist
  			
construction  InOrder // used only above
     subcase of Word
     form
      	constraints
         	self.f.orth <-- "inorder"

 
construction ConjVP  // TODO  -- needs work
  subcase of ComplexVP
  constructional
    constituents
		first: VP
      	second: VP
      	connective: Conjunction // and or etc.S
    constraints
    	first.features <--> self.features
    	second.features <--> self.features
	meaning: ConjProcess 
  		evokes ConjED as ed 
		constraints
	   		ed.ed1 <--> first.ed // fill in conjED
	  		ed.ed2 <--> second.ed
	   		ed.profiledParticipant <--> ed.ed1.profiledParticipant // fill in conjED
	   		ed.profiledParticipant <--> ed.ed2.profiledParticipant

// The idea is that e.g., a conjED will point to the 2 conjuncts, but usually 
// will not have the other ED roles filled in. This is detectable from the 
// form, but also because unfilled role is known .

*/

//  ************************
//      modified VPs
//  ************************

construction AdverbialVP  // he moved Box2 fast;  no order
	subcase of VP
	constructional 
		constituents
			modifier: Adverbial
			modifiedVP: VP
		constraints
			//modifiedVP.argform <-- Transitive  // 10/15/13
			self.features <--> 	modifiedVP.features
	meaning
		constraints
			modifier.m.modifiedThing <--> modifiedVP.m

construction ParticipleVP  // he moved walking  10/18/13
	subcase of VP
	constructional 
		constituents
			modifier: PresentParticiple  // make this a VP with verbform presentParticiple?
			modifiedVP: VP
		constraints
			//modifiedVP.argform <-- Transitive  // 10/15/13
			self.features <--> 	modifiedVP.features
	form
		constraints
		  modifiedVP.f before modifier.f
	meaning: CoProcess
	  // evokes CoProcess as cp  
		constraints
			//cp <--> self.m
			self.m.process2 <--> modifier.m
			self.m.process1 <--> modifiedVP.m
			//self.m.protagonist <--> cp.process1.ed
 			ed.profiledParticipant <--> modifiedVP.m.ed.profiledParticipant
 			ed.profiledProcess <--> modifiedVP.m  

construction VPParticipleVP  // he walked into the room pushing a box  10/21/13
	subcase of VP
	constructional 
		constituents
			modifier: VP
			modifiedVP: VP
		constraints
			modifier.verbform <-- PresentParticiple
            self.features <--> 	modifiedVP.features
	form
		constraints
		  modifiedVP.f before modifier.f
	meaning
	   evokes CoProcess as cp  // why not type cxn meaning to be CoProcess?
		constraints
			cp <--> self.m
			cp.process2 <--> modifier.m
			cp.process1 <--> modifiedVP.m
			//self.m.protagonist <--> cp.process1.ed
 			ed.profiledParticipant <--> modifiedVP.m.ed.profiledParticipant
 			ed.profiledProcess <--> modifiedVP.m  


//  *************************
//        Staged VP
//  *************************

construction StagedVP  // aspect verbs ~ start ArgStruct ??? 1/8/13
   subcase of	VP
    constructional 
        constituents
           v: Verb 
           vp: VP
  		constraints
			v.verbkind <-- Stage // start, etc
			v.expectedVerbForm <-->  vp.verbform
			self.features <--> v.features 
			self.verbform <--> v.verbform	
  form
  		constraints
			v.f meets vp.f
  meaning: StagedProcess
        constraints	
          self.m.protagonist <--> ed.profiledParticipant // 1/16/13
          self.m.stageRole <--> v.m.actionary
          ed.profiledProcess <--> vp.m  // should this be eventProcess instead? 10/16/13
          ed.profiledParticipant <--> vp.ed.profiledParticipant
  


//  **********************
//        VP + Adjunct
//  **********************                 
//    All Adjunct VPs temporarily commented out to reduce grammar size  2/27/14

/*
general construction AdjunctVP   // general for other coda, purpose, etc.
 subcase of VP
  constructional
    constituents
      vp: VP
      pp: AdjunctPP
   constraints        
  	  self.features <--> vp.features
 	meaning      
      evokes AdjunctModification as adjunct     
  	constraints
		self.m <--> vp.m   
      	ed <--> vp.ed
		adjunct.modifiedThing <--> self.m
    	adjunct.modifier <--> pp.m
      

construction InstrumentVP  
  subcase of AdjunctVP   
  constructional
    constituents
    	pp: InstrumentPP  //sub AdjunctPP
   meaning
	constraints
		adjunct.kind <-- @instrument  // Modification schema
		

construction TemporalVP   // walked for/in 2 minutes, needs work
  subcase of AdjunctVP
  constructional
    constituents
      pp: TemporalPhrase
  form
    constraints
      vp.f meets pp.f  // could eliminate order
  meaning  
    constraints
      self.m <--> vp.m
      ed <--> vp.ed
      ed.e-features.duration <--> pp.m.ti // TemporalInterval
      ed.e-features.telicity <--> pp.m.telicity // @bounded,
      //adj.kind <-- @temporal gone

*/	
	   


//  ************************************
//      Modal VP  -- modal verb plus VP
//  ************************************

construction ModalPlusVP  
  subcase of VP
  	constructional 
    	constituents
      		modal: Modal  // EventFeatures 
      		vp: VP  // also CopularVP
    	constraints
      		self.features <--> modal.features 
      		modal.expectedVerbForm <--> vp.verbform
    form
    	constraints
       		modal.f before vp.f 
    meaning
    	constraints
      		self.m <--> vp.m // semantics comes from the vp
      		modal.m <--> vp.ed.e-features
      		self.m.protagonist <--> vp.m.protagonist
	   		self.ed <--> vp.ed  //evoked schemas are available
			
construction NegModalPlusVP  
  	subcase of ModalPlusVP
  	 constructional 
    	constituents
    	   neg: Not-event
    form
    	constraints
       		modal.f meets neg.f 
    meaning
    	constraints
			vp.ed.e-features.negated <-- "yes"


//  ************************************			
//      Particle CxNs, also optional prep in CEA for "moved X up"
//  ************************************

//   VplusParticle temporarily commented out to reduce grammar size  3/6/14

/*
construction VplusParticle  //moved up X
  subcase of Verb
  	constructional
    	constituents
      		prep: Particle
      		v: LexicalVerb
      	constraints
  			self.features <--> v.features
   form
    	constraints
       		v.f before prep.f 
    meaning: Motion
    	constraints
    		self.m <--> v.m
      		self.m.p-features.particle <--> prep.m.val
*/
      		 
/*
construction VPplusParticle  // moved X up TODO  maybe not needed now
  subcase of VP
  	constructional 
    	constituents
      		prep: Particle
      		vp: ArgumentStructure
      	constraints
  			self.features <--> vp 
   	form
    	constraints
       		vp.f meets prep.f  
    meaning: Motion
    	constraints
    		self.m <--> vp.v.m
      		self.m.heading <--> prep.m.val	
*/


//  ************************************
//        CopularVPs 
//  ************************************

 general construction CopularVP
  subcase of VP
  constructional  
    constituents
      	cop: Verb
    constraints
		cop.argform <-- Copula 
  		self.features <--> cop.features
  		self.verbform <--> cop.verbform
    meaning: Stasis
       constraints
    	self.m <--> cop.m
        self.m.protagonist <--> ed.profiledParticipant
        
construction CopularVPLocative
  subcase of VP
  constructional  
    constituents
      	cop: Verb
      	//optional subj: NP  // “there is an X at Y”
      	pred: Loc-PP // for now
  	constraints
  		self.features <--> cop.features
  		cop.argform <-- Copula_Loc
  		self.verbform <--> cop.verbform 
  form
    constraints
      cop.f before pred.f  // for now
      //cop.f meets subj.f  // optional
  meaning: Stasis
    constraints
    	self.m <--> cop.m
        ed.profiledParticipant <--> pred.m.trajector 
        self.m.protagonist <--> ed.profiledParticipant
        self.m.state <--> pred.m 
       // subj.m <--> ed.profiledParticipant

/* 2/15/13
 construction CopularVPDistance  //X is near Y
  subcase of VP
  constructional  
    constituents 
      	cop: Verb
      	pred:AdjectivePhrase  // near X, 
  	constraints
  		self.features <--> cop.features
  		cop.argform <-- Copula_Loc 
  form
    constraints
      cop.f before pred.f  // for now
        meaning: Stasis
        evokes DistanceRelation as dr
    constraints
    	self.m <--> cop.m
        //ed.profiledParticipant <--> pred.m.trajector 
        self.m.stayer <--> ed.profiledParticipant
        self.m.state <--> dr 
        dr.first <--> ed.profiledParticipant
        dr.second <--> pred.np.m
*/
 
 construction CopularVPNominal // 2/14/13
  subcase of CopularVP
  constructional  
    constituents
      	nominal: NP
  form
    constraints
      	cop.f meets nominal.f
  meaning: Stasis
    evokes RefIdentify as ri
   constraints
        self.m.state <--> ri
        ri.first <--> ed.profiledParticipant
        ri.second <--> nominal.m      

/* 5/17/13
 construction CopularVPComparative // 11/9/12,  is bigger than Y; generalize ??
  subcase of VP
  constructional  
    constituents
      	cop: Verb
      	nominal: NP
		adj: ComparativeAdjective
		than: Than
    constraints
  		self.features <--> cop.features
  		cop.argform <-- Copula_Nom  // 11/10/12
  form
    constraints
      	cop.f meets adj.f
		adj.f	meets than.f
		than.f meets nominal.f
  meaning: Stasis
    evokes RefScaleRelation as sr
    constraints
		self.m <--> cop.m
        self.m.protagonist <--> ed.profiledParticipant
        self.m.state <--> sr
        sr.first <--> ed.profiledParticipant
        sr.second <--> nominal.m    
		nominal.m.scale <--> ed.profiledParticipant.scale
		sr.value <--> adj.m.value
*/
          		    
construction CopularVPAdjective   
  subcase of CopularVP
  constructional  
    constituents
      	cop: Verb
      	adj: Adjective
  	constraints
  		self.features <--> cop.features
  		cop.argform <-- Copula_Adj 
  	form
    constraints
      	cop.f meets adj.f
  meaning: Stasis 
    constraints
    	//adj.m.kind <-- @unmarked  // 3/5/13
    	self.m <--> cop.m
        self.m.protagonist <--> ed.profiledParticipant
        self.m.state <--> adj.m
        self.adj.m.modifiedThing <--> ed.profiledParticipant  // might be enough for Adj-N agreement 10/27/12
 		self.adj.m.domain <--> ed.profiledParticipant.ontological-category // Adj-N agreement 10/27/12
 
 
construction CopularVPParticiple // 10/16/13
  subcase of VP
  constructional  
    constituents
      	cop: Verb
      	pp: PresentParticiple
  	constraints
  		self.features <--> cop.features
  		cop.argform <-- Copula  // check this **********
  		self.verbform <--> cop.verbform 
	form
    constraints
      	cop.f meets pp.f
  meaning: Stasis
     evokes ParticipleModification as pm 
    constraints
    	//adj.m.kind <-- @unmarked  // 3/5/13
    	self.m <--> cop.m
        self.m.protagonist <--> ed.profiledParticipant
        self.m.state <--> pm
        pm.modifier <--> pp.m
        pm.modifiedThing <--> ed.profiledParticipant  // might be enough for Adj-N agreement 10/27/12
 		//self.adj.m.domain <--> ed.profiledParticipant.ontological-category // Adj-N agreement 10/27/12
 

