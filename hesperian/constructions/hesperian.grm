package hesperian
import core

// Construction for a Symptom.  This is a building block
// for the constructions below.
construction SymptomType
	subcase of AbstractNoun
	meaning: RD
		constraints
			self.m.ontological-category <-- @symptom
			
// Construction for when symptoms used alone. This acts 
// as a wrapper for the above construction in analysis		
construction Symptom
	subcase of NP
 	constructional
    	constituents
     		symp: SymptomType
	meaning: Symptom
		constraints
			symp.m <--> self.m.symptom
	
// Construction for when diseases used alone		
construction Disease
  subcase of NP
  constructional
    constituents
      dis: DiseaseType
  meaning: Symptom
    constraints
      dis.m <--> self.m.disease
    		
construction LocatedSymptom
  subcase of NP
  constructional
    constituents
      loc: PhysicalEntityNoun
      symp: SymptomType
  form
    constraints
      loc.f meets symp.f
  meaning: Symptom
    constraints
      symp.m <--> self.m.symptom
      loc.m <--> self.m.location


construction DiseaseSymptom
  subcase of NP
  constructional
    constituents
      symp: SymptomType
      dis: DiseaseType
  meaning: Symptom
    constraints
      symp.m <--> self.m.symptom
      dis.m <--> self.m.disease
      
construction DrugType
	subcase of AbstractNoun
	meaning: RD
		constraints
			self.m.ontological-category <-- @drug
      
construction Drug
	subcase of NP
 	constructional
    	constituents
     		dru: DrugType
	meaning: Drug
		constraints
			dru.m <--> self.m.drug
      
general construction CanAux
	subcase of LexicalAux
	constructional
	  constraints
	    self.expectedVerbForm <-- Base

construction DoAuxPresent
	subcase of DoAux, PresentTense
	form
	  constraints
	     self.f.orth <-- "does"
	meaning
      constraints
         pf <--> self.m

construction CanAuxPast
	subcase of CanAux, PastTense
	form
	  constraints
	     self.f.orth <-- "could"
	meaning
      constraints
         pf <--> self.m
      
construction CanAuxPresent
	subcase of CanAux, PresentTense
	form
	  constraints
	     self.f.orth <-- "can"
	meaning
      constraints
         pf <--> self.m
         
construction S-With-Can-Inversion
	subcase of S-With-Aux-Inversion 
	constructional
	  constituents
	    fin: CanAux