package core


/*
5/24/13 copy of cxn in vp.grm:

general construction ArgumentStructure 
  subcase of VP
  constructional
    constituents
      v : Verb 
    constraints
      self.features <--> v.features
      self.verbform <--> v.verbform
      self.voice <--> v.voice
   meaning
     evokes A123 as s  
     constraints
       v.m  <--> ed.profiledProcess
       self.m.p-features <--> v.m.p-features 
*/

// Neutral transitive package
// Defines general semantics for different transitive constructions
// Then, CoreActiveTransitive and CorePassiveTransitive can extend these.
// Still in testing stage (1/8/16, ST).

general construction TransitivePerception  // 8/21/13 he saw the block, the block was seen by him
	subcase of ArgumentStructure
	meaning: Perception
	 constraints
		v.verbkind <-- Perceptual
		s.a1 <--> self.m.thinker	
		s.a2 <--> self.m.content


/** Added from dropbox "robots" by Sean Trott, 2/4/15. */
general construction TransitiveCauseEffect
  subcase of ArgumentStructure
	meaning: CauseEffect
      constraints
		s.a1 <--> self.m.causalAgent
		s.a2 <--> self.m.affectedEntity		


general construction TransitiveCauseEffect_central  // he pushed the block
  subcase of TransitiveCauseEffect
	meaning
      constraints
		v.m <--> self.m 
  		
// "he painted the house blue", "he made the house bigger" (actives)
// "the house was painted blue by him" (passive)
// This is somewhat too specific? (1/6/16, ST)
general construction TransitiveChangeProperty
	subcase of TransitiveCauseEffect
	constructional
	  constituents
	    adj: Adjective
	    //np: NP
	form
	  constraints
	  // v.f before adj.f
	meaning: CauseEffect //: Creation
	   evokes Change as change
	   evokes Creation as creation
	   evokes Modification as mod
	   constraints
	     self.m.causalProcess <--> v.m
	     v.m <--> creation
	     self.m.affectedProcess <--> change
	     change.state <--> adj.m
	     change.state <--> mod
	     self.m.affectedEntity <--> mod.modifiedThing
	     creation.createdThing <--> self.m.affectedEntity



general construction Trans_CauseChangeLocation 
  subcase of TransitiveCauseEffect
  constructional
   constituents
      optional dis: SpatialQuantityNP // 1/6/16 (ST) --> still necessary?
      optional dir: Directional 
      optional pp: Path-PP 
   constraints
	  form
     constraints
	   v.f before dis.f 
       dis.f before dir.f
       dir.f before pp.f   
   meaning // CauseEffect  // inherited 
	evokes  MotionPath as mp 
      constraints 
       	self.m.affectedProcess <--> mp
       	self.m.affectedEntity <--> mp.mover 
    	self.m.affectedEntity <--> mp.spg.trajector
    	self.m.protagonist.ontological-category <-- @animate
    	mp.spg <--> pp.m 
   		mp.spg.distance <--> dis.m 
	    mp.heading <--> dir.m
	    self.m.affectedEntity.ontological-category <-- @physicalEntity 


general construction Trans_CauseChangeLocation_central
	subcase of Trans_CauseChangeLocation
	meaning 
	 constraints
	   self.m <--> v.m	    

// he moved the box
general construction Trans_CauseChangeLocation_mp
	subcase of Trans_CauseChangeLocation
	meaning 
	 constraints
	   mp <--> v.m  
	   self.m.causalProcess.actionary <-- @push_move
	 

// he pushed the box into the room
general construction Trans_CauseChangeLoc_causalAction
	subcase of Trans_CauseChangeLocation
	meaning
	 evokes ForceApplication as fa
	  constraints
	    v.m <--> fa
	    self.m.process1 <--> fa
	    fa.actedUpon <--> self.m.affectedEntity
	    self.m.actionary <-- @cause


	    	    
	    	    
// "he created the box"
// "the box was created by John"
general construction TransitiveCreation
	subcase of ArgumentStructure
	constructional
	 constituents
	   optional for: For-PP
	meaning: Creation
	  constraints
	    //self.m <--> v.m
	    for.np.m <--> self.m.intended_recipient
	    s.a1 <--> self.m.protagonist
	    s.a2 <--> self.m.createdThing	
	    
// "John entered the room"
// "the room was entered by John	    
general construction TransitiveChangeLocation 
	subcase of ArgumentStructure
	meaning: ChangeLocation
	  constraints
		s.a1 <--> self.m.mover	
		s.a2 <--> self.m.landmark
		
		
// he picked up the box
general construction TransitiveManipulation
	subcase of ArgumentStructure
	meaning: Manipulation
	  constraints
	    s.a1 <--> self.m.actor
	    s.a2 <--> self.m.manipulated_entity
	    
	    
// ObjectTransfer with DativePP
// Is this for giving only, or also getting? 
general construction TransitiveObjectTransfer
	subcase of ArgumentStructure
	constructional
	 constituents
	   pp: Path-PP
	meaning: ObjectTransfer
	  constraints
	    s.a1 <--> self.m.giver
	    s.a2 <--> self.m.theme
	    pp.m.landmark <--> s.a3
	    s.a3 <--> self.m.getter
	    //self.m <--> pp.m


// he provided the service
general construction TransitiveSupply
	subcase of ArgumentStructure
	constructional
	 constituents
	   optional to: Path-PP
	meaning: Supply
	  constraints
	    s.a1 <--> self.m.supplier
	    s.a2 <--> self.m.theme
	    self.m.recipient <--> to.m.landmark
		