// Neutral transitive package
// Defines general semantics for different transitive constructions
// Then, CoreActiveTransitive and CorePassiveTransitive can extend these.
//
// Currently orthogonal to the transitive-testing package, which uses TransitiveAction schema.
//
// Includes argument-structure for:
// -Perception
// -"Cause Effect"
// 	-Change property ("paint the house blue")
// 	-Caused change location ("move the box into the room")
// 	-Cause Change location with causal action ("push the box into the room")
// -Creation ("built the box")
// -Change location ("enter the room")
// -Object Transfer ("give THEME to RECIPIENT")
// -Supply ("provided the bread")


package argstruct
import base


// 3/16/18 copy of cxn in vp.grm:
//
// general construction ArgumentStructure
//   subcase of VP
//   constructional
//     constituents
//       v : Verb
//     constraints
//       self.features <--> v.features
//       self.verbform <--> v.verbform
//       self.voice <--> v.voice
//   meaning
//     evokes A123 as s
//     constraints
//       v.m  <--> ed.profiledProcess
//       self.m.p-features <--> v.m.p-features


// e.g. he saw the block, the block was seen by him
general construction TransitivePerception
  subcase of ArgumentStructure
  meaning: Perception
    constraints
      v.verbkind <-- Perceptual
      s.a1 <--> self.m.thinker
      s.a2 <--> self.m.content


general construction TransitiveCauseEffect
  subcase of ArgumentStructure
  meaning: CauseEffect
    constraints
      s.a1 <--> self.m.causalAgent
      s.a2 <--> self.m.affectedEntity


// e.g. he pushed the block
general construction TransitiveCauseEffect_central
  subcase of TransitiveCauseEffect
  meaning
    constraints
      v.m <--> self.m


// e.g. move the box into the room
general construction Trans_CauseChangeLocation
  subcase of TransitiveCauseEffect
  constructional
    constituents
      optional dis: SpatialQuantityNP // 1/6/16 (ST) --> still necessary?
      optional dir: Directional
      optional pp: Path-PP
  form
    constraints
      v.f before dis.f
      dis.f before dir.f
      dir.f before pp.f
  meaning // CauseEffect  // inherited
    evokes  MotionPath as mp
      constraints
        self.m.affectedProcess <--> mp
        self.m.affectedEntity <--> mp.mover
        self.m.affectedEntity <--> mp.spg.trajector
        // self.m.protagonist.ontological-category <-- @animate  // this isn't right, it excludes robots
        mp.spg <--> pp.m
        mp.spg.distance <--> dis.m
        mp.heading <--> dir.m
        self.m.affectedEntity.ontological-category <-- @physicalEntity


general construction Trans_CauseChangeLocation_central
  subcase of Trans_CauseChangeLocation
  meaning
    constraints
      self.m <--> v.m

// e.g. he moved the box
general construction Trans_CauseChangeLocation_mp
  subcase of Trans_CauseChangeLocation
  meaning
    constraints
      mp <--> v.m
      self.m.causalProcess.actionary <-- @push_move


// e.g. he pushed the box into the room
general construction Trans_CauseChangeLoc_causalAction
  subcase of Trans_CauseChangeLocation
  meaning
    evokes ForceApplication as fa
    constraints
      v.m <--> fa
      self.m.process1 <--> fa
      fa.actedUpon <--> self.m.affectedEntity
      self.m.actionary <-- @cause

// e.g. John entered the room, the room was entered by John
general construction TransitiveChangeLocation
  subcase of ArgumentStructure
  meaning: ChangeLocation
    constraints
      s.a1 <--> self.m.mover
      s.a2 <--> self.m.landmark

// ObjectTransfer with DativePP
// Is this for giving only, or also getting?
general construction TransitiveObjectTransfer
  subcase of ArgumentStructure
  constructional
    constituents
      optional pp: Path-PP
  meaning: ObjectTransfer
    constraints
      s.a1 <--> self.m.giver
      s.a2 <--> self.m.theme
      pp.m.landmark <--> s.a3
      s.a3 <--> self.m.getter
      //self.m <--> pp.m


// e.g. he provided the service
general construction TransitiveSupply
  subcase of ArgumentStructure
  constructional
    constituents
      optional to: Path-PP
  meaning: Supply
    constraints
      s.a1 <--> self.m.supplier
      s.a2 <--> self.m.theme
      self.m.recipient <--> to.m.landmark


// Possession: he owns the box, the box is owned by him
// e.g. he had/owned the box
general construction TransitivePossession
  subcase of ArgumentStructure
  meaning: PossProcess
    constraints
      v.verbkind <-- PossessionKind
      s.a1 <--> self.m.protagonist
      s.a2 <--> self.m.possessed
