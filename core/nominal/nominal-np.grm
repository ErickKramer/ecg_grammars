package core
import adjectives

/******************************************************************************
This file contains  constructions for noun phrases, with determiners and without determiners,
as well as modified Proper Nouns, e.g. "southern France". 


******************************************************************************/

 

// Not sure that this is the analysis we want, but it works: "cats are small", "boxes are red"
// 
construction UndeterminedNP_Kernel  // various uses including:  white as snow 
  subcase of UndeterminedNP
  constructional
    constituents
      k: Kernel  
  meaning: RD
    constraints
      self.m.givenness <-- @typeIdentifiable // Michael
	  self.m.bounding <-- @indeterminate   
	  self.m <--> k.m
	  
// these constraints should be tighter	  
// the purpose of this is really for things like "southern France"
construction ModifiedProperNoun
	subcase of NP
	constructional
	 constituents
	   adj: Adjective
	   np: ProperNounNP
	 constraints
	  self.features <--> np.features
   form
    constraints
      adj.f meets np.f
   meaning: RD
     constraints
       adj.m.modifiedThing <--> np.m
       self.m <--> np.m
       np.m.ontological-category <-- @location
	  

 


// 	   SpecifierPlusKernel, 


general construction SpecifierPlusKernel  // also subs Specifier3, QuantityNP(2)
  subcase of NP
 
general construction Specifier2PlusKernel   //also see Determiner, Wh, Possesive PN
  subcase of SpecifierPlusKernel
  constructional
    constituents   
      s: SpecifierPhrase                 //12/30/12
      k: Kernel
    constraints
      self.features <--> k.features
      self.features <--> s.features
  form
    constraints 
      s.f before k.f
  meaning
    constraints
      self.m <--> k.m
      self.m <--> s.m


construction DeterminerPlusKernel 
  subcase of Specifier2PlusKernel
  constructional
    constituents   
      s: Determiner  


construction QuantityNP
  subcase of SpecifierPlusKernel
  constructional
    constituents
      q: Quantifier
      k: Kernel
    constraints
      self.features <--> k.features
      //q.features.number <--> k.features.number
  form
    constraints
      q.f before k.f
  meaning: RD
    constraints
      self.m <--> k.m
      //self.m.number <--> q.m.number
      self.m.extras.quantity.amount <--> q.m
      self.m.givenness <-- @uniquelyIdentifiable
      self.m.extras.quantity.units <--> self.m.ontological-category



//  we now also have "his" as Possessive-NP, 

construction PossessivePronounPlusKernel // 
  subcase of Specifier2PlusKernel
  constructional
    constituents   
      s: PossessivePronoun // no need to check case
      k: Kernel 
	meaning
		constraints
			s.m <-> k.m 


