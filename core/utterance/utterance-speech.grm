/*
Defines constructions for utterances with optional punctuation marks. This way, output from speech recognition 
can still be parsed as utterances.

ST, 7/6/16.

*/

package utterance-speech
import utterance


 		
 		
 // Declarative
construction DeclarativeUtterance_Speech
	subcase of Utterance_Speech
	constructional
	   constituents
	     core: Declarative
	     optional end: PMark
	form
	   constraints
	      core.f meets end.f
	meaning
	   constraints
	      //self.m.addressee <--> addr.m
	      self.m.mood <-- "Declarative"
	      self.m.speechAct <-- @direct  // testing
	      //core.m.profiledParticipant <--> self.m.addressee 
	      
// Imperative 

// This construction requires a SimpleImperative. The reasoning
// is that for the robot commands, conditional imperatives would often
// be subsumed under this construction, so the mood wouldn't be specified
// properly - this impacts the Specializer routing/n-tuple creation.
// There might be a better way to do this down the line.

// NOTE: As of 5/26/16 (ST), this no longer requires SimpleImperative. 
// I am testing having the Problem Solver combine the mood ("Imperative") and the complex kind ("conditional")
// still not working for conditionals, e.g. "John, if the box is big, build a house!"

construction AddressedImperative_Speech
	subcase of Utterance_Speech
	constructional
	   constituents
	     addr: NP // optional?
	     optional comma: Comma
	     core: SimpleImperative 
	     optional end: IMark
	form
	   constraints
	      addr.f meets comma.f
	      comma.f meets core.f
	      core.f meets end.f
	meaning
	   constraints
	      self.m.addressee <--> addr.m
	      self.m.mood <-- "Imperative"
	      self.m.speechAct <-- @direct
	      core.m.profiledParticipant <--> self.m.addressee	


   
	      

construction ImperativeUtterance_Speech
	subcase of Utterance_Speech
    constructional
	   constituents
		 core: Imperative 
	     optional end: IMark
	form
	   constraints
	      core.f meets end.f
	meaning
	   constraints
	      self.m.mood <-- "Imperative"
	      self.m.speechAct <-- @direct
	      core.m.profiledParticipant <--> self.m.addressee	
 

// addressed conditional imperative
construction AddressedConditionalImperative_Speech
	subcase of Utterance_Speech
	constructional
	   constituents
	     addr: NP
	     optional comma: Comma
	     core: ConditionalImperative
	     optional end: IMark
	form
	   constraints
	      addr.f meets comma.f
	      comma.f meets core.f
	      core.f meets end.f
	meaning
	   constraints
	      self.m.addressee <--> addr.m
	      self.m.speechAct <-- @direct
	      self.m.mood <-- "Imperative"
	      core.m.profiledParticipant <--> self.m.addressee
	      core.m.complexKind <-- @conditional	                 



	      
//  Utterance, Discourse Element -- Questions
// Uncomment all this below to fully analyze "was the block red ? "
general construction Utterance_Speech
    subcase of RootType 
    constructional 
        constituents
           optional addr: NP
           optional comma: Comma
            core: S
            optional end: EMark  // punctuation like . ! ?
    form 
        constraints  
            addr.f meets comma.f
            comma.f meets core.f
            core.f meets end.f
    meaning: DiscourseElement
        constraints
          self.m.content <--> core.m
          self.m.addressee <--> addr.m


// is the block red?          
construction YNQuesUtterance_Speech  
    subcase of Utterance_Speech
    constructional 
        constituents
            core: YN-Question
            optional end: QMark    
    form
        constraints
            core.f meets end.f 
    meaning 
        constraints
            self.m.mood <-- "YN-Question" // this is where we want mood	
            self.m.content <--> core.m
            self.m.speechAct <-- @direct
            


         			