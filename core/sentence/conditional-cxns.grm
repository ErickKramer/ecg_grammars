package conditionals
import conjunctions


schema Conditional
	roles
	  condition: EventDescriptor // maps onto condition
	  value: @temporality // needs work, but this should differentiate between "if" and "while"
	    
general construction Conditional
  subcase of Word
  meaning: Conditional
  



construction Then-Conditional
  subcase of Word
  form
    constraints
      self.f.orth <-- "then"

construction If
  subcase of Conditional
  form
    constraints
      self.f.orth <-- "if"
  meaning
   constraints
     self.m.value <-- @bounded

construction While
  subcase of Conditional
  form
    constraints
      self.f.orth <-- "while"
  meaning
   constraints
     self.m.value <-- @ongoing

general construction ConditionalImperative
	subcase of Imperative
	constructional
	  constituents
	    cond: Conditional
	    bool: Declarative
	    optional c: Comma
	    optional then2: Then-Conditional
	    core: SimpleImperative
	    optional c2: Comma
	    optional else: Else-Clause
	  constraints
	    core.vp.verbform <-- Base
	 form
	  constraints
	    core.f before c2.f
	    c2.f before else.f
	 meaning: ConditionalED
	  constraints
	    cond.m.condition <--> bool.m
	    cond.m.value <--> self.m.conditionalValue
	    self.m.profiledParticipant <--> core.m.profiledParticipant
	    self.m.profiledParticipant <--> else.m.profiledParticipant
	    self.m.complexKind <-- @conditional
	    
     
     
construction Else-Clause
	constructional
	  constituents
	    else: Else-Conjunction
	    core: SimpleImperative
	meaning: EventDescriptor
	  constraints
	    self.m <--> core.m

general construction Else-Conjunction
	subcase of Conjunction

construction Else
	subcase of Else-Conjunction
	form
	 constraints
	   self.f.orth <-- "else"

construction Otherwise
	subcase of Else-Conjunction
	form
	 constraints
	   self.f.orth <-- "otherwise"	
 
construction StandardConditionalImperative
	subcase of ConditionalImperative
	form
	  constraints
	    cond.f meets bool.f
	    bool.f meets then2.f
	    bool.f before core.f
	    core.f before else.f
	meaning
	  constraints
	   	self.m.ed1 <--> bool.m
	    self.m.ed2 <--> core.m
	    self.m.ed3 <--> else.m
	    
// "Robot1, move to the blue box if it is near the green box!"	      
construction InverseConditional	
	subcase of ConditionalImperative 
	form
	  constraints
	  	core.f meets cond.f
	    cond.f meets bool.f
	    bool.f before else.f
	meaning
	  constraints
	   	self.m.ed1 <--> bool.m
	    self.m.ed2 <--> core.m

// ConditionalDeclarative
general construction ConditionalDeclarative
	subcase of S
	constructional
	  constituents
	    cond: If
	    bool: Declarative
	    optional c: Comma
	    optional then2: Then-Conditional
	    core: Declarative
	    optional else: Else-Clause
	 meaning: ConditionalED
	  constraints
	    self.m.profiledParticipant <--> core.m.profiledParticipant
	    //self.m.ed1 <--> bool.m
	    //self.m.ed2 <--> core.m
	    self.m.complexKind <-- @conditional	  
	    self.m.ed3 <--> else.m  


construction StandardConditionalDeclarative
	subcase of ConditionalDeclarative
	form
	  constraints
	    cond.f meets bool.f
	    bool.f meets then2.f
	    bool.f before core.f
	    core.f before else.f
	meaning
	  constraints
	   	self.m.ed1 <--> bool.m
	    self.m.ed2 <--> core.m	
	    self.m.ed3 <--> else.m    
	          