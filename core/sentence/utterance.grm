package utterance

general construction WH-Question  
	subcase of  Question
	
construction WHQuesUtterance  
    subcase of Utterance
    constructional 
        constituents
            core: WH-Question
            optional end: QMark  //    ?
    form
        constraints
            core.f meets end.f 
    meaning
        constraints
            self.m.mood <-- "WH-Question" // this is where we want mood
 			self.m.content <--> core.m
 			self.m.speechAct <-- @direct // maybe
 			
construction SubjWH-Question
    subcase of WH-Question, S-With-Subj
    constructional
        constituents
           subj: WH-NP
    	   fin: VP
        constraints
    form
        constraints
	       subj.f before fin.f
    meaning
        constraints
	       self.m <--> fin.ed 				


	   
// Construction for "WH"-questions - testing (added from Base or written here, 7/14/14, ST)

general construction WH-NP
   subcase of NP

general construction WH-Specifier  // TODO these need work, questionRD?
   	subcase of Specifier
   	
construction WhSpecifierPlusKernel
  subcase of Specifier2PlusKernel, WH-NP
  constructional
    constituents   
      s: WH-Specifier
      k: Kernel
   meaning
	constraints
		s.m <-> k.m


construction What-Specifier
   subcase of WH-Specifier
   form
      constraints
         self.f.orth <-- "what"
   meaning: RD
      constraints
 		self.m.extras.specificWh <-- @what


construction Who-NP
	subcase of WH-NP, Word
	form
	 constraints
	   self.f.orth <-- "who"
    meaning: RD
     constraints
       self.m.extras.specificWh <-- @who

construction Which-Specifer
   subcase of WH-Specifier
   form
      constraints
         self.f.orth <-- "which"
   meaning: RD
      constraints
 		self.m.extras.specificWh <-- @which
 
 
construction Which-NP
   subcase of WH-NP, Word
   form
      constraints
         self.f.orth <-- "which"
   meaning: RD
      constraints
 		self.m.extras.specificWh <-- @which
 		 			
construction What-WH-NP
   subcase of WH-NP, Word
   form
      constraints
         self.f.orth <-- "what"
   meaning: RD
      constraints
 		self.m.extras.specificWh <-- @what
 		
construction Where-WH-NP
   subcase of WH-NP, Word
   form
      constraints
         self.f.orth <-- "where"
   meaning: RD
      constraints
 		self.m.extras.specificWh <-- @where 
 		
 		
 // Declarative
construction DeclarativeUtterance
	subcase of Utterance
	constructional
	   constituents
	     core: Declarative
	     optional end: PMark
	form
	   constraints
	      core.f meets end.f
	meaning
	   constraints
	      //self.m.addressee <--> addr.m
	      self.m.mood <-- "Declarative"
	      self.m.speechAct <-- @direct  // testing
	      //core.m.profiledParticipant <--> self.m.addressee 
	      
// Imperative 

// This construction requires a SimpleImperative. The reasoning
// is that for the robot commands, conditional imperatives would often
// be subsumed under this construction, so the mood wouldn't be specified
// properly - this impacts the Specializer routing/n-tuple creation.
// There might be a better way to do this down the line.

// NOTE: As of 5/26/16 (ST), this no longer requires SimpleImperative. 
// I am testing having the Problem Solver combine the mood ("Imperative") and the complex kind ("conditional")
// still not working for conditionals, e.g. "John, if the box is big, build a house!"
construction AddressedImperative
	subcase of Utterance
	constructional
	   constituents
	     addr: NP // optional?
	     optional comma: Comma
	     core: Imperative 
	     optional end: IMark
	form
	   constraints
	      addr.f meets comma.f
	      comma.f meets core.f
	      core.f meets end.f
	meaning
	   constraints
	      self.m.addressee <--> addr.m
	      self.m.mood <-- "Imperative"
	      self.m.speechAct <-- @direct
	      core.m.profiledParticipant <--> self.m.addressee	
	      
	      

construction UnaddressedImperative
	subcase of Utterance
    constructional
	   constituents
		 core: Imperative 
	     optional end: IMark
	form
	   constraints
	      core.f meets end.f
	meaning
	   constraints
	      self.m.mood <-- "Imperative"
	      self.m.speechAct <-- @direct
	      core.m.profiledParticipant <--> self.m.addressee	
	      
// addressed conditional imperative
construction AddressedConditionalImperative
	subcase of Utterance
	constructional
	   constituents
	     addr: NP
	     optional comma: Comma
	     core: ConditionalImperative
	     optional end: IMark
	form
	   constraints
	      addr.f meets comma.f
	      comma.f meets core.f
	      core.f meets end.f
	meaning
	   constraints
	      self.m.addressee <--> addr.m
	      self.m.speechAct <-- @direct
	      self.m.mood <-- "Imperative"
	      core.m.profiledParticipant <--> self.m.addressee
	      core.m.complexKind <-- @conditional	                 


// Conditional imperative
// no longer necessary, can be subsumed under Declarative-Utterance
/*
construction ConditionalDeclarativeUtterance
	subcase of Utterance
	constructional
	   constituents
	     core: ConditionalDeclarative
	     end: EMark
	form
	   constraints
	      core.f meets end.f
	meaning
	   constraints
	      self.m.mood <-- "Conditional-Declarative"
	      self.m.content <--> core.m
	      //core.m.profiledParticipant <--> self.m.addressee
	      core.m.complexKind <-- @conditional_declarative		 
*/	      
	      
//  Utterance, Discourse Element -- Questions
// Uncomment all this below to fully analyze "was the block red ? "
general construction Utterance
    subcase of RootType 
    constructional 
        constituents
            core: S
            optional end: EMark  // punctuation like . ! ?
    form 
        constraints  
            core.f meets end.f
    meaning: DiscourseElement
        constraints
          self.m.content <--> core.m


// is the block red?          
construction YNQuesUtterance  
    subcase of Utterance
    constructional 
        constituents
            core: YN-Question
            optional end: QMark    
    form
        constraints
            core.f meets end.f 
    meaning 
        constraints
            self.m.mood <-- "YN-Question" // this is where we want mood	
            self.m.content <--> core.m
            self.m.speechAct <-- @direct
            
 

            
            
general construction EMark  
    subcase of Word

construction IMark
   subcase of EMark
   form
      constraints
         self.f.orth <-- "!"
         
construction PMark
	subcase of EMark
	form
	  constraints
	    self.f.orth <-- "."         

construction Comma
	subcase of Word
	form
	   constraints
	      self.f.orth <-- ","

construction QMark
    subcase of EMark 
    form 
        constraints
            self.f.orth <-- "?" 

schema DiscourseElement //meaning of Utterance
    roles
        speaker: RD 	
        addressee: RD 	
        attentional_focus  
        content: EventDescriptor
        mood: @mood			// one of declarative, imperative, ...
        speechAct // direct, indirect?
    constraints
		speaker.ontological-category <-- @sentient
		//addressee.ontological-category <-- @sentient


         			