package core
import universal-schemas

schema ComplexED
	subcase of EventDescriptor
	roles
	  complexKind: @event-kind
	  ed1: EventDescriptor
	  ed2: EventDescriptor
 
schema ConditionalED
	subcase of ComplexED
	roles
	  ed3: EventDescriptor // "else push it north"

	
// Should be more general type, e.g. "MeasureProcess" 
// The ticket costs 6 bucks, the box weighs 5 pounds, etc.
// This is distinct from "weigh-assess" ("he weighed the evidence", "he weighed the box")	
schema Measure // Interim (ST, 10/14/15)
	subcase of Process
	roles
	  object: RD
	  measurement: RD //: QuantifiedRD
	  dimension

schema MeasurePredication
	subcase of Measure //, Stasis
	roles
	  object: RD
	  measurement: RD //: QuantifiedRD
	  dimension
	  state
	constraints
	  object <--> protagonist
	  state <--> measurement 
	  //measurement.ontological-category <-- @units 

// "he weighed the box"
schema MeasureProcess
	subcase of Measure
	roles
	  object: RD
	  measurement: RD //: QuantifiedRD
	  dimension
	constraints
	  protagonist.ontological-category <-- @agent // Pretty sure this is correct  
	
schema Change
	subcase of Process
	roles
	  state: Modification //: ChangedState
	  actionary: @statechange
	  temporality: @bounded
	  oldValue //: @propValue
	constraints
	  actionary <-- @statechange
	  
// State Change processes: "the box changed from red to blue"
schema StateChange
	subcase of Change
	roles
	  state //: ChangedState
	  actionary: @statechange
	  temporality: @bounded
	
// State Change processes: "the box changed from red to blue"
schema ScaleChange
	subcase of Change
	roles
	  state: ScalarModifier //: ChangedScale
	  actionary: @scalechange
	  temporality: @bounded
	  direction

// Creation
schema Creation
	subcase of Process
	roles
	  creator
	  createdThing
	constraints
     protagonist <--> creator


//
schema EmbeddedEventProcessSimple
	subcase of Process
	roles
	  event: Process
