/*
Package with several VP cxns to allow analysis of complex VPs like:
-"he ran to the box before/after pushing it"
-"he built the house then painted it"

The design is compositional, so that the conjunctions (after/before)
do much of the temporal binding, and the phrasal cxns match the constituents
to placeholders ("SerialProcessArgs"). 

The analysis also contains a "TemporalSequence" (time1, time2), which isn't used downstream,
but could potentially enrich analysis for some domains.

*/


//package serial
package serial
import conjunctions

general construction ComplexVP
	subcase of VP
	constructional
	 constituents
	  v1: HasVerbFeatures
	  v2: VP
	 constraints
	   v1.features <--> self.features
   meaning: ComplexProcess


construction SerialVP
	subcase of ComplexVP
	constructional
	 constituents
	   v1: VP
	   conj: Then-Serial
	   v2: VP
	  constraints
	   self.features <--> v1.features
	   self.voice <--> v1.voice
	form 
	 constraints
	   v1.f meets conj.f
	   conj.f meets v2.f
	meaning: SerialProcess
	 constraints
	   self.m <--> conj.sp
	   self.m.protagonist <--> v1.m.protagonist
	   v2.m.protagonist <--> v1.m.protagonist
	   self.m.process1 <--> v1.m
	   self.m.process2 <--> v2.m
	   self.m.connective <--> conj.m.value
	   ed.profiledParticipant <--> self.m.protagonist

// could probably binarize these to make them more compositional
construction SerialVP2
	subcase of ComplexVP
	constructional
	 constituents
	   v1: VP
	   conj: SerialConjunction // constraint to be of "after"/"before" type
	   v2: VP
	 constraints
	   self.features <--> v1.features
	   v2.verbform <-- PresentParticiple
	   v1.features <--> v2.features
	form 
	 constraints
	   v1.f meets conj.f
	   conj.f meets v2.f
	meaning: SerialProcess
	 constraints
	   self.m <--> conj.sp
	   self.m.protagonist <--> v1.m.protagonist
	   v2.m.protagonist <--> v1.m.protagonist
	   //self.m.process2 <--> v1.m
	   //self.m.process1 <--> v2.m
	   self.m.pa.p1 <--> v1.m
	   self.m.pa.p2 <--> v2.m
	   self.m.connective <--> conj.m.value
	   ed.profiledParticipant <--> self.m.protagonist

	   
	   
