package auxiliaries

general construction Aux
	subcase of HasVerbFeatures
	meaning: ProcessFeatures

general construction LexicalAux
	subcase of Word, Aux
	
	
general construction bhAux
	subcase of Aux
	
general construction DoAux
	subcase of LexicalAux
	constructional
	  constraints
	    self.expectedVerbForm <-- Base

construction DoAuxPast
	subcase of DoAux, PastTense
	form
	  constraints
	     self.f.orth <-- "did"
	meaning
      constraints
         pf <--> self.m

general construction BeAux
	subcase of LexicalAux, bhAux

construction BePastSing	
	subcase of BeAux, PastTense // , Singular
	form
	  constraints
	    self.f.orth <-- "was"
	meaning
	  constraints
	    pf <--> self.m

general construction AuxPlusVerb  // removed optional subj  
   	subcase of ComplexVerb 
   	constructional 
   		constituents
			aux: Aux
			main: ComplexVerb
	    constraints
			self.features <--> aux.features
			self.argform <--> main.argform
			self.verbkind <--> main.verbkind
			//aux.expectedVerbForm <--> main.features.verbform
   form
      constraints
       		aux.f before main.f
       		// aux.f meets subj.f   // why was this in ??
   meaning
      constraints
			aux.m <--> main.m.p-features
			self.m <--> main.m
			self.m.p-features <--> main.m.p-features
			//aux.m.voice <-- @voice // over-ridden by Passive case
			// subj.m <--> self.m.protagonist  // bind it if it appears 
			
construction ProgressiveAuxPlusVerb  // was moving, has been moving
   	subcase of AuxPlusVerb
   	constructional 
	    constraints
			self.voice <--> main.voice 
			main.verbform <-- PresentParticiple
	meaning
		constraints
			aux.m.progressive <-- @yes

construction PassiveAuxPlusVerb
	subcase of AuxPlusVerb
	constructional
	  constituents
	    aux: BeAux
	    main: VerbChunk
	  constraints
	    main.verbform <-- PastParticiple
	    self.voice <-- Passive
	meaning
	  constraints
	     aux.m.voice <-- @passive
	     self.m.p-features.voice <-- @passive
	    
	    
	    			
general construction S-With-Aux-Inversion  
    subcase of YN-Question   
	constructional
        constituents
        fin: Aux 
        subj: NP 
        vp: VP           
       constraints
       subj.features.person <--> fin.features.person
        subj.features.number <--> fin.features.number
            fin.expectedVerbForm <--> vp.verbform
            fin.verbform <-- Finite
    form
        constraints
            fin.f meets subj.f 
            subj.f meets vp.f
    meaning: EventDescriptor  // from S
     constraints
	    subj.m <--> self.m.profiledParticipant
	    self.m <--> vp.ed // unifies event descriptors
	    //subj.m <--> vp.m.protagonist // not true for passive
	    vp.m.p-features <--> fin.m


// Was the box moving / being moved?
construction S-With-BeProgressive-Inversion
    subcase of S-With-Aux-Inversion 
    constructional
        constituents
        fin: BeAux 
        constraints
            vp.verbform <-- PresentParticiple
    meaning  
        constraints 
fin.m.progressive <-- "yes"